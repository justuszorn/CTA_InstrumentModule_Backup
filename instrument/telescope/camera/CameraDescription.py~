import hessio as h
from astropy import units as u
import numpy as np
from ctapipe.io.camera import guess_camera_geometry

def initialize(filename,tel_id,item):
    if 'simtel.gz' in filename:
        return initialize_hessio(filename,tel_id)
    elif 'fits' in filename:
        return initialize_fits(filename,tel_id,item)

def initialize_hessio(filename,tel_id):
    cam_fov = -1
    pix_id = [-1]
    pix_posX = h.get_pixel_position(tel_id)[0].tolist()
    pix_posY = h.get_pixel_position(tel_id)[1].tolist()
    pix_posZ = [-1]
    cam_class = guess_camera_geometry(pix_posX*u.m,pix_posY*u.m).cam_id

    
    #to use this, one has to go through every event of the run...
    #n_channel = h.get_num_channel(tel_id)
    #ld.channel_num = n_channel
    #for chan in range(n_channel):
    #    ld.adc_samples.append(h.get_adc_sample(tel_id,chan).tolist())

    return cam_class,cam_fov,pix_id,pix_posX,pix_posY,pix_posZ
        
def initialize_fits(filename,tel_id,item):
    hdulist = item
    teles = hdulist[1].data
    telescope_id = teles["TelID"].tolist()
    
    cam_class = -1

    index = telescope_id.index(tel_id)
    cam_fov = hdulist[1].data[index]["FOV"]

    pix_id = []
    index2 = np.where(hdulist[2].data['L0ID'] == index)[0]
    for i in index2:
        pix_id.append(hdulist[2].data[i]['PixelID'])


    pix_posX = [-1]
    pix_posY = [-1]
    pix_posZ = [-1]

    return cam_class,cam_fov,pix_id,pix_posX,pix_posY,pix_posZ
